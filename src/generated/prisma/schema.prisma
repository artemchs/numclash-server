// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email String  @unique
  name  String?
  image String?

  gamesWon        Game[]         @relation("GamesWon")
  gamesAsPlayer1  Game[]         @relation("Player1")
  gamesAsPlayer2  Game[]         @relation("Player2")
  questions       MathQuestion[]
  invitesReceived Invite[]       @relation("InvitesReceived")
  invitesSent     Invite[]       @relation("InvitesSent")
}

enum GameStatus {
  PENDING
  IN_PROGRESS
  DRAW
  PLAYER1_WON
  PLAYER2_WON
}

model Game {
  id         String    @id @default(cuid())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  startedAt  DateTime
  finishedAt DateTime?

  status        GameStatus       @default(PENDING)
  questionsType MathQuestionType

  player1   User           @relation("Player1", fields: [player1Id], references: [id])
  player2   User           @relation("Player2", fields: [player2Id], references: [id])
  winner    User?          @relation("GamesWon", fields: [winnerId], references: [id])
  questions MathQuestion[]
  player1Id String
  player2Id String
  winnerId  String?
  Invite    Invite[]
}

model Invite {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  game   Game   @relation(fields: [gameId], references: [id])
  gameId String
  to     User   @relation("InvitesReceived", fields: [toId], references: [id])
  toId   String
  from   User   @relation("InvitesSent", fields: [fromId], references: [id])
  fromId String
}

enum MathQuestionType {
  ARITHMETICS
}

// -- Score system:
// 0 - No answer or wrong answer
// 1 - Correct answer for arithmetics difficulty

model MathQuestion {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  question       String  @db.Text
  correctAnswer  String
  answer         String?
  score          Int     @default(0)
  responseTimeMs Int?

  game     Game               @relation(fields: [gameId], references: [id])
  player   User               @relation(fields: [playerId], references: [id])
  gameId   String
  playerId String
  status   MathQuestionStatus @default(NOT_ANSWERED)
}

enum MathQuestionStatus {
  NOT_ANSWERED
  ANSWERED
}
